<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yande.Api</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "M:OfficeToPdf.Convertor.Serialize(System.Object)" -->
        <member name="M:OfficeToPdf.Convertor.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeToPdf.Convertor.ObjectToBytes(System.Object)">
            <summary> 
            将一个object对象序列化，返回一个byte[]         
            </summary> 
            <param name="obj">能序列化的对象</param>         
            <returns></returns> 
        </member>
        <member name="M:OfficeToPdf.Convertor.BytesToObject(System.Byte[])">
            <summary> 
            将一个序列化后的byte[]数组还原         
            </summary>
            <param name="Bytes"></param>         
            <returns></returns> 
        </member>
        <member name="M:OfficeToPdf.Convertor.ByteArrayToObject(System.Byte[],System.Boolean)">
            <summary>
            二进制反序列化：byte=>实体object
            </summary>
            <param name="SerializedObj"></param>
            <param name="ThrowException"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeToPdf.Convertor.ObjectToByteArray(System.Object,System.Boolean)">
            <summary>
            二进制序列化：实体=》byte
            </summary>
            <param name="Obj"></param>
            <param name="ThrowException"></param>
            <returns></returns>
        </member>
        <member name="F:OfficeToPdf.MQManager._publishModelDic">
            <summary>
            持久化发送和订阅对象
            </summary>
        </member>
        <member name="M:OfficeToPdf.MQManager.Publish(OfficeToPdf.Messages)">
            <summary>
            发布消息
            </summary>
            <param name="message">消息实体</param>
        </member>
        <member name="M:OfficeToPdf.MQManager.SubscribeFanout``1(System.Action{``0})">
            <summary>
            广播消息 queue自动生成
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler"></param>
        </member>
        <member name="M:OfficeToPdf.MQManager.Subscribe``1(System.Action{``0})">
            <summary>
            订阅消息
            </summary>
            <param name="handler">消息处理</param>
        </member>
        <member name="M:OfficeToPdf.MQManager.Subscribe``1(System.String,System.String,System.Boolean,System.Action{``0},System.Boolean)">
            <summary>
            接收消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queue">队列名称</param>
            <param name="isProperties"></param>
            <param name="handler">消费处理</param>
            <param name="isDeadLetter"></param>
        </member>
        <member name="M:OfficeToPdf.MQManager.Dispose">
            <summary>
            执行与释放或重置非托管资源关联的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:OfficeToPdf.MQManager.Pull``1(System.Action{``0})">
            <summary>
            主动拉消息
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:OfficeToPdf.MQManager.GetModel(System.String,System.String,System.String,System.Boolean)">
            <summary>
            获取Model
            </summary>
            <param name="exchange">交换机名称</param>
            <param name="queue">队列名称</param>
            <param name="routingKey"></param>
            <param name="isProperties">是否持久化</param>
            <returns></returns>
        </member>
        <member name="M:OfficeToPdf.MQManager.GetModel(System.String,System.String,System.Boolean)">
            <summary>
            获取Model
            </summary>
            <param name="queue">队列名称</param>
            <param name="isProperties"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeToPdf.MQManager.ExchangeDeclare(RabbitMQ.Client.IModel,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            交换器声明
            </summary>
            <param name="iModel"></param>
            <param name="exchange">交换器</param>
            <param name="type">交换器类型：
            1、Direct Exchange – 处理路由键。需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全
            匹配。这是一个完整的匹配。如果一个队列绑定到该交换机上要求路由键 “dog”，则只有被标记为“dog”的
            消息才被转发，不会转发dog.puppy，也不会转发dog.guard，只会转发dog
            2、Fanout Exchange – 不处理路由键。你只需要简单的将队列绑定到交换机上。一个发送到交换机的消息都
            会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。Fanout
            交换机转发消息是最快的。
            3、Topic Exchange – 将路由键和某模式进行匹配。此时队列需要绑定要一个模式上。符号“#”匹配一个或多
            个词，符号“*”匹配不多不少一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.*”
            只会匹配到“audit.irs”。</param>
            <param name="durable">持久化</param>
            <param name="autoDelete">自动删除</param>
            <param name="arguments">参数</param>
        </member>
        <member name="M:OfficeToPdf.MQManager.QueueDeclare(RabbitMQ.Client.IModel,System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            队列声明
            </summary>
            <param name="channel"></param>
            <param name="queue">队列</param>
            <param name="durable">持久化</param>
            <param name="exclusive">排他队列，如果一个队列被声明为排他队列，该队列仅对首次声明它的连接可见，
            并在连接断开时自动删除。这里需要注意三点：其一，排他队列是基于连接可见的，同一连接的不同信道是可
            以同时访问同一个连接创建的排他队列的。其二，“首次”，如果一个连接已经声明了一个排他队列，其他连
            接是不允许建立同名的排他队列的，这个与普通队列不同。其三，即使该队列是持久化的，一旦连接关闭或者
            客户端退出，该排他队列都会被自动删除的。这种队列适用于只限于一个客户端发送读取消息的应用场景。</param>
            <param name="autoDelete">自动删除</param>
            <param name="arguments">参数</param>
        </member>
        <member name="M:OfficeToPdf.MQManager.GetRabbitMqAttribute(OfficeToPdf.Messages)">
            <summary>
            获取对象属性
            </summary>
            <param name="msgEnt"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeToPdf.MQManager.GetRabbitMqAttribute``1">
            <summary>
            获取对象属性
            </summary>
            <param name="msgEnt"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeToPdf.MQConfig">
            <summary>
            
            </summary>
        </member>
        <member name="T:Yande.Api.ConfigurationExtensions">
            <summary>
            配置扩展类
            </summary>
        </member>
        <member name="M:Yande.Api.ConfigurationExtensions.GetRabbitMqSection(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获取Rabitmq配置
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.ConfigurationExtensions.GetRedisSection(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获取Redis配置
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.ConfigurationExtensions.GetMysqlSection(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获取Mysql配置
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.ConfigurationExtensions.GetMongoDbSection(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获取Monogo配置
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.ConfigurationExtensions.IsSSOAuthentication(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获取SSOAuthentication是否开启
            </summary>
            <param name="serviceInfo"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.ConfigurationExtensions.GetAllowCorsHosts(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获取跨域配置
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.ConfigurationExtensions.GetConsulSection(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获取Consul配置
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.ConfigurationExtensions.GetJWTSection(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获取JWT配置
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.ConfigurationExtensions.GetThreadPoolSettingsSection(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获取线程池配置
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.ConfigurationExtensions.GetHangfireSection(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            获取Hangfire配置
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.Controllers.NacosController.GetConfigBinding">
            <summary>
            GetConfigBinding
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.Controllers.NacosController.GetYaml">
            <summary>
            GetYaml
            </summary>
        </member>
        <member name="T:Yande.Api.Controllers.UploadController">
            <summary>
            UploadController
            </summary>
        </member>
        <member name="M:Yande.Api.Controllers.UploadController.Upload">
            <summary>
            文件上传
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.Controllers.UploadController.UploadFile">
            <summary>
            文件上传分片上传
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.Controllers.YandeController.MiniProfilerTest">
            <summary>
            MiniProfilerTest
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.Controllers.YandeController.SwaggerHelper(System.String)">
            <summary>
            SwaggerHelper
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.Controllers.YandeController.GetCaptcha">
            <summary>
            获取活动验证码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.Controllers.YandeController.CheckCaptcha(System.Int32)">
            <summary>
            检查验证
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.Controllers.YandeController.GetValue">
            <summary>
            基于ASP.NET Core api 的服务器事件发送
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.Controllers.YandeController.BarCode">
            <summary>
            生成条形码二维码
            </summary>
            https://mp.weixin.qq.com/s/rO2-a7GdMKxfrq4mqvYrxg
            <returns></returns>
        </member>
        <member name="M:Yande.Api.Controllers.YandeController.RandomCode">
            <summary>
            根据规则生成订单号
            </summary>
            https://mp.weixin.qq.com/s/v1WVywxT8b2-JMBilarEOA
            <returns></returns>
        </member>
        <member name="T:Yande.Api.Models.Configs.MongoConfig">
            <summary>
            JWT配置
            </summary>
        </member>
        <member name="P:Yande.Api.Models.Configs.MongoConfig.ConnectionString">
            <summary>
            Gets or sets the MongoDB connection string.
            </summary>
        </member>
        <member name="P:Yande.Api.Models.Configs.MongoConfig.CollectionNamingConvention">
            <summary>
            Gets or sets the collection naming convention.
            Defaults to <see cref="!:NamingConvention.Snake"/>.
            </summary>
        </member>
        <member name="P:Yande.Api.Models.Configs.MongoConfig.PluralizeCollectionNames">
            <summary>
            Gets or sets a value indicating whether to pluralize collection names.
            Defaults to <c>true</c>.
            </summary>
        </member>
        <member name="F:Yande.Api.Models.Configs.MongoNamingConvention.LowerCase">
            <summary>
            Convert names to "lowercase" without word separators.
            </summary>
        </member>
        <member name="F:Yande.Api.Models.Configs.MongoNamingConvention.UpperCase">
            <summary>
            Convert names to "UPPERCASE" without word separators.
            </summary>
        </member>
        <member name="F:Yande.Api.Models.Configs.MongoNamingConvention.Pascal">
            <summary>
            Convert names to "UpperCamelCase".
            </summary>
        </member>
        <member name="F:Yande.Api.Models.Configs.MongoNamingConvention.Camel">
            <summary>
            Convert names to "camelCase".
            </summary>
        </member>
        <member name="F:Yande.Api.Models.Configs.MongoNamingConvention.Snake">
            <summary>
            Convert names to "snake_case".
            </summary>
        </member>
        <member name="T:Yande.Api.Models.Configs.MysqlConfig">
            <summary>
            MysqlConfig配置
            </summary>
        </member>
        <member name="T:Yande.Api.Models.Configs.RedisConfig">
            <summary>
            RedisConfig配置
            </summary>
        </member>
        <member name="F:Yande.Api.Program.serilogDebug">
            <summary>
            Serilog日志模板
            </summary>
        </member>
        <member name="T:Yande.Api.SevicesExtension">
            <summary>
            SevicesExtension
            </summary>
        </member>
        <member name="M:Yande.Api.SevicesExtension.AddHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            注册健康检查组件
            </summary>
            <param name="services"></param>
            <param name="Configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.SlideCaptcha.Captcha.Generate">
            <summary>
            生成验证码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.SlideCaptcha.Captcha.GetGraphics(System.Drawing.Image)">
            <summary>
            获取图片Graphics
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.SlideCaptcha.Captcha.GetSliderPath(System.Int32,System.Int32)">
            <summary>
            获取滑块path
            </summary>
        </member>
        <member name="M:Yande.Api.SlideCaptcha.Captcha.CaptureSlider(System.Drawing.Image,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取滑块区域
            </summary>
            <param name="image"></param>
            <param name="path"></param>
            <param name="x"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.SlideCaptcha.Captcha.CaptureImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            裁剪图片
            </summary>
            <param name="fromImage"></param>
            <param name="offsetX"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.SlideCaptcha.Captcha.RandomNext(System.Int32,System.Int32)">
            <summary>
            生成随机数
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.SlideCaptcha.Captcha.AntiColor(System.Drawing.Color)">
            <summary>
            取反色
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.SlideCaptcha.Captcha.BgImage">
            <summary>
            获取背景图
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.SlideCaptcha.Captcha.Base64ToImage(System.String)">
            <summary>
            base64转图片
            </summary>
            <param name="base64string"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.SlideCaptcha.Captcha.ImageToBase64(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            图片转base64
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="F:Yande.Api.SlideCaptcha.Config.l">
            <summary>
            矩形宽
            </summary>
        </member>
        <member name="F:Yande.Api.SlideCaptcha.Config.r">
            <summary>
            圆形半径
            </summary>
        </member>
        <member name="F:Yande.Api.SlideCaptcha.Config.d">
            <summary>
            圆形直径
            </summary>
        </member>
        <member name="F:Yande.Api.SlideCaptcha.Config.a">
            <summary>
            计算圆形与矩形交接三角形边
            </summary>
        </member>
        <member name="F:Yande.Api.SlideCaptcha.Config.blod">
            <summary>
            滑块边框
            </summary>
        </member>
        <member name="F:Yande.Api.SlideCaptcha.Config.watermarkText">
            <summary>
            水印
            </summary>
        </member>
        <member name="F:Yande.Api.SlideCaptcha.Config.showWatermark">
            <summary>
            是否显示水印
            </summary>
        </member>
        <member name="M:Yande.Api.SwaggerHelper.SbRequestData(Newtonsoft.Json.Linq.JToken,System.String,System.String,Yande.Api.ParamTypeEnum)">
            <summary>
            无限套娃 递归
            </summary>
            <param name="schemas">实体类集合</param>
            <param name="modelName">实体类名称</param>
            <param name="methodName">方法名称</param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.SwaggerHelper.RequestModelName(Newtonsoft.Json.Linq.JToken)">
            <summary>
            通过方法 找请求实体名称
            </summary>
            <param name="json">paths</param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.SwaggerHelper.RequestModelName2(Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            集合中包含集合 继续找下一个集合
            </summary>
            <param name="json"></param>
            <param name="name">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.SwaggerHelper.ResponseModelName(Newtonsoft.Json.Linq.JToken)">
            <summary>
            返回实体名称
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.SwaggerHelper.MustList(Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            获取实体必填参数
            </summary>
            <param name="json"></param>
            <param name="name">方法实体类名称</param>
            <returns></returns>
        </member>
        <member name="M:Yande.Api.SwaggerHelper.RouteName(System.String)">
            <summary>
            路由方法名称
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:Yande.Api.InterfaceMethod.route">
            <summary>
            路由
            </summary>
        </member>
        <member name="P:Yande.Api.InterfaceMethod.type">
            <summary>
            请求方式
            </summary>
        </member>
        <member name="P:Yande.Api.InterfaceMethod.name">
            <summary>
            controller 名称
            </summary>
        </member>
        <member name="P:Yande.Api.InterfaceMethod.summary">
            <summary>
            接口说明
            </summary>
        </member>
        <member name="P:Yande.Api.InterfaceMethod.requesyBody">
            <summary>
            请求集合
            </summary>
        </member>
        <member name="P:Yande.Api.InterfaceMethod.responses">
            <summary>
            返回实体
            </summary>
        </member>
        <member name="P:Yande.Api.InterfaceRequestField.code">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Yande.Api.InterfaceRequestField.type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Yande.Api.InterfaceRequestField.description">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Yande.Api.InterfaceRequestField.isMust">
            <summary>
            是否必填
            </summary>
        </member>
        <member name="P:Yande.Api.InterfaceRequestField.MethodType">
            <summary>
            方法类型
            </summary>
        </member>
        <member name="P:Yande.Api.InterfaceRequestField.maxLength">
            <summary>
            字段长度
            </summary>
        </member>
        <member name="P:Yande.Api.InterfaceRequestField.paramType">
            <summary>
            1.入参 2.出参
            </summary>
        </member>
        <member name="P:Yande.Api.FieldDescription.maxLength">
            <summary>
            字段长度
            </summary>
        </member>
        <member name="M:Yande.Api.WordHelper.IsNullable(System.Type)">
            <summary>
            Determine of specified type is nullable
            </summary>
        </member>
        <member name="M:Yande.Api.WordHelper.GetCoreType(System.Type)">
            <summary>
            Return underlying type if type is Nullable otherwise return the type
            </summary>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.ListRangeAsync(System.String)">
            <summary>
            根据key获取RedisValue
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.ListLeftPushAsync(System.String,System.String)">
            <summary>
            在列表头部插入值。如果键不存在，先创建再插入值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.ListRightPushAsync(System.String,System.String)">
            <summary>
            在列表尾部插入值。如果键不存在，先创建再插入值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.ListRightPushAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            在列表尾部插入数组集合。如果键不存在，先创建再插入值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.ListLeftPopAsync``1(System.String)">
            <summary>
            移除并返回存储在该键列表的第一个元素  反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.ListRightPopAsync``1(System.String)">
            <summary>
            移除并返回存储在该键列表的最后一个元素   反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.ListLeftPopAsync(System.String)">
            <summary>
            移除并返回存储在该键列表的第一个元素
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.ListRightPopAsync(System.String)">
            <summary>
            移除并返回存储在该键列表的最后一个元素
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.ListLengthAsync(System.String)">
            <summary>
            列表长度
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.ListRangeAsync(System.String,System.Int32)">
            <summary>
            返回在该列表上键所对应的元素
            </summary>
            <param name="redisKey"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.ListRangeAsync(System.String,System.Int32,System.Int32)">
            <summary>
            根据索引获取指定位置数据
            </summary>
            <param name="redisKey"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.ListDelRangeAsync(System.String,System.String,System.Int64)">
            <summary>
            删除List中的元素 并返回删除的个数
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.ListClearAsync(System.String)">
            <summary>
            清空List
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.SortedSetAddAsync(System.String,System.String,System.DateTime)">
            <summary>
            延迟消息
            </summary>
            <param name="redisKey">键</param>
            <param name="redisValue">消息</param>
            <param name="cacheTime">延迟时间</param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.PublishAsync(System.String,System.String)">
            <summary>
            PublishAsync
            </summary>
            <param name="channel"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.SubscribeAsync(System.String,System.Action{StackExchange.Redis.RedisChannel,StackExchange.Redis.RedisValue})">
            <summary>
            SubscribeAsync
            </summary>
            <param name="channel"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.HSET(System.String,System.String,System.String)">
            <summary>
            HSET
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.HSETNX(System.String,System.String,System.String)">
            <summary>
            HSETNX 不存在才设置
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.HGET(System.String,System.String)">
            <summary>
            HGET 获取hash中的一个key
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.HIncr(System.String,System.String,System.Int32)">
            <summary>
            HIncr
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.HDIncr(System.String,System.String,System.Int32)">
            <summary>
            HIncr
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.HLen(System.String)">
            <summary>
            hlen 返回hash存在的key个数
            </summary>
            <param name="hkey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.Hdel(System.String,System.String)">
            <summary>
            hdel 删除一个hash里面的key
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.HashStrLen(System.String,System.String)">
            <summary>
            hstrlen hash中key的数据长度
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.HashKeyExist(System.String,System.String)">
            <summary>
            hexists 判断一个key是否在hash中
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.HMSET(System.String,StackExchange.Redis.HashEntry[])">
            <summary>
            hmset 批量设置多个数据
            </summary>
            <param name="hkey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.HMGET(System.String,StackExchange.Redis.RedisValue[])">
            <summary>
            hmget 批量获取多个数据
            </summary>
            <param name="hkey"></param>
            <param name="hashField"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.HKeys(System.String)">
            <summary>
            hkeys 获取所有的key
            </summary>
            <param name="hkey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.HVals(System.String)">
            <summary>
            hvals 获取所有的value
            </summary>
            <param name="hkey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.HashGetAll``1(System.String)">
            <summary>
            hall 获取所有的键值对
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hkey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.IRedisOperationRepository.HashAll(System.String)">
            <summary>
            hall 获取所有的键值对
            </summary>
            <param name="hkey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.ListRangeAsync(System.String)">
            <summary>
            根据key获取RedisValue
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.ListLeftPushAsync(System.String,System.String)">
            <summary>
            在列表头部插入值。如果键不存在，先创建再插入值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.ListRightPushAsync(System.String,System.String)">
            <summary>
            在列表尾部插入值。如果键不存在，先创建再插入值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.ListRightPushAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            在列表尾部插入数组集合。如果键不存在，先创建再插入值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.ListLeftPopAsync``1(System.String)">
            <summary>
            移除并返回存储在该键列表的第一个元素  反序列化
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.ListRightPopAsync``1(System.String)">
            <summary>
            移除并返回存储在该键列表的最后一个元素   反序列化
            只能是对象集合
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.ListLeftPopAsync(System.String)">
            <summary>
            移除并返回存储在该键列表的第一个元素   
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.ListRightPopAsync(System.String)">
            <summary>
            移除并返回存储在该键列表的最后一个元素   
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.ListLengthAsync(System.String)">
            <summary>
            列表长度
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.ListRangeAsync(System.String,System.Int32)">
            <summary>
            返回在该列表上键所对应的元素
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.ListRangeAsync(System.String,System.Int32,System.Int32)">
            <summary>
            根据索引获取指定位置数据
            </summary>
            <param name="redisKey"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.ListDelRangeAsync(System.String,System.String,System.Int64)">
            <summary>
            删除List中的元素 并返回删除的个数
            </summary>
            <param name="redisKey">key</param>
            <param name="redisValue">元素</param>
            <param name="type">大于零 : 从表头开始向表尾搜索，小于零 : 从表尾开始向表头搜索，等于零：移除表中所有与 VALUE 相等的值</param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.ListClearAsync(System.String)">
            <summary>
            清空List
            </summary>
            <param name="redisKey"></param>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.SortedSetAddAsync(System.String,System.String,System.DateTime)">
            <summary>
            SortedSetAddAsync
            </summary>
            <param name="redisKey"></param>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.PublishAsync(System.String,System.String)">
            <summary>
            PublishAsync
            </summary>
            <param name="channel"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.SubscribeAsync(System.String,System.Action{StackExchange.Redis.RedisChannel,StackExchange.Redis.RedisValue})">
            <summary>
            SubscribeAsync
            </summary>
            <param name="channel"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.HSET(System.String,System.String,System.String)">
            <summary>
            HSET
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.HSETNX(System.String,System.String,System.String)">
            <summary>
            HSETNX 不存在才设置
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.HGET(System.String,System.String)">
            <summary>
            HGET 获取hash中的一个key
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.HIncr(System.String,System.String,System.Int32)">
            <summary>
            HIncr
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.HDIncr(System.String,System.String,System.Int32)">
            <summary>
            HDIncr
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.HLen(System.String)">
            <summary>
            hlen 返回hash存在的key个数
            </summary>
            <param name="hkey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.Hdel(System.String,System.String)">
            <summary>
            hdel 删除一个hash里面的key
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.HashStrLen(System.String,System.String)">
            <summary>
            hstrlen hash中key的数据长度
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.HashKeyExist(System.String,System.String)">
            <summary>
            hexists 判断一个key是否在hash中
            </summary>
            <param name="hkey"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.HMSET(System.String,StackExchange.Redis.HashEntry[])">
            <summary>
            hmset 批量设置多个数据
            </summary>
            <param name="hkey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.HMGET(System.String,StackExchange.Redis.RedisValue[])">
            <summary>
            hmget 批量获取多个数据
            </summary>
            <param name="hkey"></param>
            <param name="hashField"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.HKeys(System.String)">
            <summary>
            hkeys 获取所有的key
            </summary>
            <param name="hkey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.HVals(System.String)">
            <summary>
            hvals 获取所有的value
            </summary>
            <param name="hkey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.HashGetAll``1(System.String)">
            <summary>
            hall 获取所有的键值对
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hkey"></param>
            <returns></returns>
        </member>
        <member name="M:YandeSignApi.Applications.Redis.RedisOperationRepository.HashAll(System.String)">
            <summary>
            hall 获取所有的键值对
            </summary>
            <param name="hkey"></param>
            <returns></returns>
        </member>
    </members>
</doc>
